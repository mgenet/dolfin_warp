stages:
  # - build
  - test
  # - deploy

# build_docker:
#   stage: build
#   tags:
#     - ci.inria.fr
#     - large
#   image: ubuntu:20.04
#   script:
#     - apt update; DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates curl git gnupg lsb-release mercurial python3 python3-pip tzdata
#     - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
#     - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
#     - apt update; apt install -y docker-ce docker-ce-cli containerd.io
#     - docker images
#     - docker rmi -f $CI_REGISTRY_IMAGE || true
#     - docker images --filter="reference=$CI_REGISTRY_IMAGE" --format="{{.Repository}}:{{.Tag}}" | xargs docker rmi || true
#     - docker images
#     - docker image prune -f
#     - docker images
#     - python3 -m pip install jupyter-repo2docker
#     - repo2docker --no-run --user-id 1000 --user-name jovyan --image-name $CI_REGISTRY_IMAGE .repo2docker
#     - docker images
#     - docker image tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
#     - docker images
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker push $CI_REGISTRY_IMAGE
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
#     - docker logout $CI_REGISTRY

tests-on-ubuntu-20.04-with-apt: # MG20230608: This leads to seg fault while manipulating vtk objects inside cpp fenics expressions… # MG20241020: I think the mesh reader fails…
  stage: test
  when: manual
  tags:
    - ci.inria.fr
    - large
  image: ubuntu:20.04
  script:
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt upgrade -y
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y build-essential git gnuplot python3-matplotlib python3-numpy python3-pandas python3-pip python-is-python3 # MG20220814: environment variables are needed to prevent tzdata installation hanging while waiting timezone info, cf. https://anonoz.github.io/tech/2020/04/24/docker-build-stuck-tzdata.html
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y software-properties-common; add-apt-repository -y ppa:fenics-packages/fenics; apt update; apt install -y fenics; export DISPLAY=0:0
#     - apt update; apt install -y libopenblas-base; export OMP_NUM_THREADS="1" # MG20221201: This seems to fail in Ubuntu 20.04
    - apt update; apt install -y libvtk7-dev python3-vtk7; export CPATH="/usr/include/vtk-7.1":$CPATH
    - apt update; apt install -y libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxft-dev libxinerama1 gcc-multilib xvfb gmsh; pip install gmsh
    - apt update; apt install -y python3-h5py; pip install meshio; pip install numpy==1.23.5 # MG20220814: meshio needs updated numpy apparently # MG20230103: apparently numpy >= 1.24 does not work anymore with the old version of pandas (and probably other stuff) present in Ubuntu 20.04 apt repo, cf. https://stackoverflow.com/a/74975994
    - pip install git+https://github.com/mgenet/myPythonLibrary.git git+https://github.com/mgenet/myVTKPythonLibrary.git git+https://github.com/mgenet/vtkpython_cbl.git git+https://github.com/mgenet/dolfin_mech.git
    - cd Tests; ln -s ../dolfin_warp; make

tests-on-ubuntu-22.04-with-apt: # MG20230608: This leads to seg fault while manipulating vtk objects inside cpp fenics expressions… # MG20241020: I think the image reader fails…
  stage: test
  when: manual
  tags:
    - ci.inria.fr
    - large
  image: ubuntu:22.04
  script:
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt upgrade -y
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y build-essential git gnuplot python3-matplotlib python3-numpy python3-pandas python3-pip python-is-python3 # MG20220814: environment variables are needed to prevent tzdata installation hanging while waiting timezone info, cf. https://anonoz.github.io/tech/2020/04/24/docker-build-stuck-tzdata.html
    - apt update; apt install -y software-properties-common; add-apt-repository -y ppa:fenics-packages/fenics; apt update; apt install -y fenics; export DISPLAY=0:0
    - apt update; apt install -y libopenblas-base; export OMP_NUM_THREADS="1"
    - apt update; apt install -y libvtk9-dev python3-vtk9; export CPATH="/usr/include/vtk-9.1":$CPATH
    - apt update; apt install -y libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxft-dev libxinerama1 gcc-multilib xvfb gmsh; pip install gmsh
    - apt update; apt install -y python3-h5py; pip install meshio; pip install numpy==1.24.4 # MG20220814: meshio needs updated numpy apparently # MG20230103: apparently numpy >= 1.25 does not work with FEniCS
    - pip install git+https://github.com/mgenet/myPythonLibrary.git git+https://github.com/mgenet/myVTKPythonLibrary.git git+https://github.com/mgenet/vtkpython_cbl.git git+https://github.com/mgenet/dolfin_mech.git
    - cd Tests; ln -s ../dolfin_warp; make

tests-on-ubuntu-24.04-with-apt: # MG 20241017: apt python version is 3.12, which seems incompatible with numpy 1.24…
  stage: test
  when: manual
  tags:
    - ci.inria.fr
    - large
  image: ubuntu:24.04
  script:
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt upgrade -y
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y build-essential git gnuplot python3-matplotlib python3-numpy python3-pandas python3-pip python-is-python3 # MG20220814: environment variables are needed to prevent tzdata installation hanging while waiting timezone info, cf. https://anonoz.github.io/tech/2020/04/24/docker-build-stuck-tzdata.html
    - apt update; apt install -y software-properties-common; add-apt-repository -y ppa:fenics-packages/fenics; apt update; apt install -y fenics; export DISPLAY=0:0
    # - apt update; apt install -y libopenblas-base; export OMP_NUM_THREADS="1" # MG20241017: Not present in Ubuntu 24.04
    - apt update; apt install -y libvtk9-dev python3-vtk9; export CPATH="/usr/include/vtk-9.1":$CPATH
    - apt update; apt install -y libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxft-dev libxinerama1 gcc-multilib xvfb gmsh; pip install --break-system-packages gmsh
    - apt update; apt install -y python3-h5py; pip install --break-system-packages meshio; pip install --break-system-packages numpy==1.24.4 # MG20220814: meshio needs latest numpy apparently # MG20230103: apparently numpy >= 1.25 does not work with FEniCS
    - pip install --break-system-packages git+https://github.com/mgenet/myPythonLibrary.git git+https://github.com/mgenet/myVTKPythonLibrary.git git+https://github.com/mgenet/vtkpython_cbl.git git+https://github.com/mgenet/dolfin_mech.git
    - cd Tests; ln -s ../dolfin_warp; make

tests-on-ubuntu-20.04:
  stage: test
  only:
    - devel
    - /^devel-.*/
  tags:
    - ci.inria.fr
    - large
  image: ubuntu:20.04
  script:
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt upgrade -y
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y build-essential gcc-multilib git gnuplot libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama1 libxft-dev wget xvfb
    # - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y libopenblas-base; export OMP_NUM_THREADS="1" # MG20221201: This seems to fail in Ubuntu 20.04
    - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh; bash Miniconda3-latest-Linux-x86_64.sh -b -p /root/miniconda; eval "$(/root/miniconda/bin/conda shell.bash hook)"; conda init
    # - conda install conda-libmamba-solver; conda config --set solver libmamba # MG20241017: This is now the default solver, cf. https://conda.org/blog/2023-11-06-conda-23-10-0-release
    - conda create -y -c conda-forge -n dolfin_warp expat=2.5 fenics=2019.1.0 matplotlib=3.5 meshio=5.3 mpi4py=3.1.3 numpy=1.23.5 pandas=1.3 pip python=3.10 scipy=1.8 vtk=9.1; conda activate dolfin_warp # MG20230608: need to install meshio via conda because pip install has h5py dependency issues # MG20230608: need to install vtk9 because vtk7 seems to require python2 # MG20241020: expat > 2.5 seems to break vtkXMLDataParser, cf. https://gitlab.kitware.com/vtk/vtk/-/issues/19258
    - conda activate dolfin_warp; conda env config vars set CPATH=$CONDA_PREFIX/include/vtk-9.1; conda deactivate; conda activate dolfin_warp
    - pip install git+https://github.com/mgenet/myPythonLibrary.git git+https://github.com/mgenet/myVTKPythonLibrary.git git+https://github.com/mgenet/vtkpython_cbl.git git+https://github.com/mgenet/dolfin_mech.git
    - cd Tests; ln -s ../dolfin_warp; make

tests-on-ubuntu-22.04:
  stage: test
  only:
    - devel
    - /^devel-.*/
  tags:
    - ci.inria.fr
    - large
  image: ubuntu:22.04
  script:
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt upgrade -y
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y build-essential gcc-multilib git gnuplot libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama1 libxft-dev wget xvfb
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y libopenblas-base; export OMP_NUM_THREADS="1"
    - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh; bash Miniconda3-latest-Linux-x86_64.sh -b -p /root/miniconda; eval "$(/root/miniconda/bin/conda shell.bash hook)"; conda init
    # - conda install conda-libmamba-solver; conda config --set solver libmamba # MG20241017: This is now the default solver, cf. https://conda.org/blog/2023-11-06-conda-23-10-0-release
    - conda create -y -c conda-forge -n dolfin_warp expat=2.5 fenics=2019.1.0 matplotlib=3.5 meshio=5.3 mpi4py=3.1.3 numpy=1.23.5 pandas=1.3 pip python=3.10 scipy=1.8 vtk=9.1; conda activate dolfin_warp # MG20230608: need to install meshio via conda because pip install has h5py dependency issues
    - conda activate dolfin_warp; conda env config vars set CPATH=$CONDA_PREFIX/include/vtk-9.1; conda deactivate; conda activate dolfin_warp
    - pip install git+https://github.com/mgenet/myPythonLibrary.git git+https://github.com/mgenet/myVTKPythonLibrary.git git+https://github.com/mgenet/vtkpython_cbl.git git+https://github.com/mgenet/dolfin_mech.git
    - cd Tests; ln -s ../dolfin_warp; make

tests-on-ubuntu-24.04:
  stage: test
  only:
    - devel
    - /^devel-.*/
  tags:
    - ci.inria.fr
    - large
  image: ubuntu:24.04
  script:
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt upgrade -y
    - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y build-essential gcc-multilib git gnuplot libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama1 libxft-dev wget xvfb
    # - apt update; DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y libopenblas-base; export OMP_NUM_THREADS="1" # MG20241017: Not present in Ubuntu 24.04
    - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh; bash Miniconda3-latest-Linux-x86_64.sh -b -p /root/miniconda;  eval "$(/root/miniconda/bin/conda shell.bash hook)"; conda init
    # - conda install conda-libmamba-solver; conda config --set solver libmamba # MG20241017: This is now the default solver, cf. https://conda.org/blog/2023-11-06-conda-23-10-0-release
    - conda create -y -c conda-forge -n dolfin_warp expat=2.5 fenics=2019.1.0 matplotlib=3.5 meshio=5.3 mpi4py=3.1.3 numpy=1.23.5 pandas=1.3 pip python=3.10 scipy=1.8 vtk=9.1; conda activate dolfin_warp # MG20230608: need to install meshio via conda because pip install has h5py dependency issues
    - conda activate dolfin_warp; conda env config vars set CPATH=$CONDA_PREFIX/include/vtk-9.1; conda deactivate; conda activate dolfin_warp
    - pip install git+https://github.com/mgenet/myPythonLibrary.git git+https://github.com/mgenet/myVTKPythonLibrary.git git+https://github.com/mgenet/vtkpython_cbl.git git+https://github.com/mgenet/dolfin_mech.git
    - cd Tests; ln -s ../dolfin_warp; make

# docker:
#   stage: deploy
#   only:
#     - master
#   tags:
#     - ci.inria.fr
#     - small
#   image: docker:19.03.11
#   services:
#     - docker:19.03.11-dind
#   script:
#     - echo Docker login
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - echo Build dolfin_warp-2017.2.0-dev
#     - docker build -t $CI_REGISTRY/mgenet/dolfin_warp/dolfin_warp-2017.2.0-dev -f Docker/dolfin_warp-2017.2.0-dev/Dockerfile .
#     - docker push $CI_REGISTRY/mgenet/dolfin_warp/dolfin_warp-2017.2.0-dev
#     - echo Build dolfin_warp-2017.2.0
#     - docker build -t $CI_REGISTRY/mgenet/dolfin_warp/dolfin_warp-2017.2.0 -f Docker/dolfin_warp-2017.2.0/Dockerfile .
#     - docker push $CI_REGISTRY/mgenet/dolfin_warp/dolfin_warp-2017.2.0
#     - echo Build dolfin_warp-2019.1.0-dev
#     - docker build -t $CI_REGISTRY/mgenet/dolfin_warp/dolfin_warp-2019.1.0-dev -f Docker/dolfin_warp-2019.1.0-dev/Dockerfile .
#     - docker push $CI_REGISTRY/mgenet/dolfin_warp/dolfin_warp-2019.1.0-dev
#     - echo Build dolfin_warp-2019.1.0
#     - docker build -t $CI_REGISTRY/mgenet/dolfin_warp/dolfin_warp-2019.1.0 -f Docker/dolfin_warp-2019.1.0/Dockerfile .
#     - docker push $CI_REGISTRY/mgenet/dolfin_warp/dolfin_warp-2019.1.0
#     - echo Docker logout
#     - docker logout $CI_REGISTRY

# pypi:
#   stage: deploy
#   only:
#     - master
#   tags:
#     - ci.inria.fr
#     - small
#   image: python
#   variables:
#     TWINE_USERNAME: $PYPI_USER
#     TWINE_PASSWORD: $PYPI_PASS
#   script:
#     - pip install -U setuptools twine
#     - python setup.py sdist bdist_wheel
#     - twine upload dist/*

# gitlab:
#   stage: deploy
#   only:
#     - master
#   tags:
#     - ci.inria.fr
#     - small
#   image: python
#   script:
#     - pip install -U setuptools twine
#     - python setup.py sdist bdist_wheel
#     - TWINE_USERNAME=gitlab-ci-token TWINE_PASSWORD=${CI_JOB_TOKEN} twine upload --verbose --skip-existing --repository-url https://gitlab.inria.fr/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*
